#!/bin/bash
set -e

function prerequisites {
  #Prerequisites function
  echo -e
  echo -e "${GREEN}Updating system & installing some dependencies...${NC}"
  echo -e
  DISTRO=$(cat /etc/*-release | grep -w "ID")
  
  if [[ $DISTRO == *"linuxmint"* ]] || [[ $DISTRO == *"ubuntu"* ]] || [[ $DISTRO == *"debian"* ]] || [[ $DISTRO == *"elementary"* ]]; then
                                      sudo DEBIAN_FRONTEND=noninteractive apt-get update -qq && sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade > /dev/null
                                      sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install build-essential > /dev/null && sudo DEBIAN_FRONTEND=noninteractive apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install git rsync curl zip unzip jq gcc wget > /dev/null
                                      echo "export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin" >> ~/.profile
                                      echo "export GOPATH=$HOME/go" >> ~/.profile
                                  else 
                                    echo "Unsupported DISTRO..."
                                    exit
   fi
  #Create Projects folders
  mkdir -p $CUSTOM_HOME/Projects
  mkdir -p $CUSTOM_HOME/go

  #Limit journalctl size
  echo -e
  echo -e "${GREEN}Limiting journalctl logs size...${NC}"
  echo -e
  echo 'SystemMaxUse=2000M' | sudo tee -a /etc/systemd/journald.conf && echo 'SystemMaxFileSize=400M' | sudo tee -a /etc/systemd/journald.conf
  sudo systemctl restart systemd-journald

  echo -e "${GREEN}Task completed.${NC}"
  echo -e
}

function paths {
  # Export environment variables
  export GOPATH=$HOME/go
  export PATH=$GOPATH/bin:$PATH
  export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
}

function go_lang {
  #Define go version and identify machine architecture
  GO_LATEST="go1.15.5"
  ARCH=$(dpkg --print-architecture)

  #Check if golang is installed on system
  if ! [ -x "$(command -v go)" ]; then
        #Get the latest version of GO for amd64 & installing it
        echo -e
        echo -e "${RED}GO is not installed on your system${NC}"
        echo -e
        echo -e "${GREEN}The best working version of Go is:${CYAN}$GO_LATEST${NC}"
        echo -e "${GREEN}Installing it now...${NC}"
        echo -e
        wget -4 https://dl.google.com/go/$GO_LATEST.linux-$ARCH.tar.gz
        sudo tar -C /usr/local -xzf $GO_LATEST.linux-$ARCH.tar.gz
        rm $GO_LATEST.linux-$ARCH.tar.gz

      else
          #Check the installed version number
          GOVERSION=$(go version | awk '{print $3}')
          if [[ "$GOVERSION" < "go1.15.5" ]]; then 
                echo -e
                echo -e "${RED}GO version is ${CYAN}$GOVERSION${RED} and the minimum required version is ${CYAN}$GO_LATEST${RED}... ${NC}"              
                #Detect go install method
                GO_INSTALL_METHOD=$(which go)

                    if [[ "$GO_INSTALL_METHOD" == "/usr/local/go/bin/go" ]]; then
                            #Installed by scripts. Go ahead and upgrade.
                            echo -e
                            echo -e "${GREEN}Your GO binary will pe upgraded to the minimum required version...${NC}"
                            sudo rm -rf /usr/local/go
                            wget -4 https://dl.google.com/go/$GO_LATEST.linux-$ARCH.tar.gz
                            sudo tar -C /usr/local -xzf $GO_LATEST.linux-$ARCH.tar.gz
                            rm $GO_LATEST.linux-$ARCH.tar.gz

                        else
                        echo -e
                        echo -e "${RED}GO was not installed using the elrond scripts. Operation cannot continue...${NC}"
                        exit
                    fi          
              
                else
                echo -e
                echo -e "${GREEN}GO is already installed: ${CYAN}$GOVERSION${NC}${GREEN}...skipping install${NC}"
                echo -e      
          fi
  fi

}

function nvm_install {
#Check if nvm is installed
if [ -e $HOME/.nvm/nvm.sh ]; then
            export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && NVMVERSION=$(nvm --version)
            echo -e
            echo -e "${GREEN}NVM is already installed: ${CYAN}$NVMVERSION${NC}${GREEN}...skipping install${NC}"
            echo -e
            
          else
            #Install the latest version of NVM
            export NVM_DIR="$HOME/.nvm" && (
            git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
            cd "$NVM_DIR"
            git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
            ) && \. "$NVM_DIR/nvm.sh"
            #Export paths to .profile & .bashrc
            echo "export NVM_DIR=\"$HOME/.nvm\"" >> ~/.profile
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.profile
            echo "export NVM_DIR=\"$HOME/.nvm\"" >> ~/.bashrc
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc
  fi
}

function install_nodejs {
#Install nodejs, yarn & pm2
export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#Install nodejs v12.18 - the recommended version
nvm install v12.18 
#Install latest yarn and pm2
npm install yarn -g
}

function install_pgsql {
#Check if postgres is installed locally
if ! [ -x "$(command -v psql)" ]; then
                  echo -e
                  echo -e "${RED}Postgresql is not installed on your system${NC}"
                  echo -e
                  #Add Postgresql 12 repo to ubuntu
                  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
                  echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |sudo tee  /etc/apt/sources.list.d/pgdg.list
                  #Install the Postgresql 12 debs
                  sudo apt update && sudo apt -y install postgresql-12 postgresql-client-12
                  #Start and enable the postgresql service
                  sudo systemctl start postgresql.service && sudo systemctl enable postgresql.service 
                  #Secure postgresql super-user with password
                  sudo -u postgres bash -c "psql -c \"ALTER USER postgres WITH PASSWORD '$POSTGRES_ADMIN_PASS';\""

            else 
              PGSQLVERSION=$(psql --version)
              echo -e
              echo -e "${GREEN}Postgresql is already installed: ${CYAN}$PGSQLVERSION${NC}${GREEN}...skipping install${NC}"
              echo -e
  fi
}

function pgsql_user {
#Ask to create a database and user for the chainlink node
echo -e
echo -e "${GREEN}Creating a database and user with values from variables.cfg...${NC}"
echo -e
sudo -u postgres bash -c "psql -c \"CREATE USER $POSTGRES_USER WITH PASSWORD '$POSTGRES_PASSWORD';\""
sudo -u postgres createdb -O $POSTGRES_USER $POSTGRES_DB
}

function chainlink_build {
#If previous build exists remove it
if [ -d "$CUSTOM_HOME/Projects/chainlink" ]; then sudo rm -rf $CUSTOM_HOME/Projects/chainlink; fi
if [ -e $CUSTOM_HOME/go/bin/chainlink ]; then sudo rm $CUSTOM_HOME/go/bin/chainlink; fi
if [ -e $CUSTOM_HOME/go/bin/gencodec ]; then sudo rm $CUSTOM_HOME/go/bin/gencodec; fi

#Clone and build the chainlink node
cd /home/ubuntu/Projects/
git clone https://github.com/smartcontractkit/chainlink && cd chainlink && make install

#Populate the .env file for the node
cp -f "$CUSTOM_HOME/elrond-chainlink-scripts/CONFIGS/.env" "$CUSTOM_HOME/Projects/chainlink/.env"
echo "ROOT=$CUSTOM_HOME/Projects/chainlink" >> $CUSTOM_HOME/Projects/chainlink/.env
echo "DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_SERVER:$POSTGRES_PORT/$POSTGRES_DB" >> $CUSTOM_HOME/Projects/chainlink/.env
#Populate chainlink user & password
echo "$CHAINLINK_MAIL" > $CUSTOM_HOME/Projects/chainlink/.api
echo "$CHAINLINK_PASS" >> $CUSTOM_HOME/Projects/chainlink/.api
#Populate wallet password
echo "$CHAINLINK_WALLET" > $CUSTOM_HOME/Projects/chainlink/.password

#Make sure the node is installed correctly
CHAINLINKVERSION=$(/home/ubuntu/Projects/chainlink/chainlink --version)
echo -e
echo -e "${GREEN}Install complete for ${CYAN}$CHAINLINKVERSION${NC}${GREEN}...${NC}"
echo -e
}

function adapter_build {
#If previous build exists remove it
if [ -d "$CUSTOM_HOME/Projects/sc-chainlink-rs" ]; then sudo rm -rf /home/ubuntu/Projects/sc-chainlink-rs; fi

#Clone and build the elrond-adapter
cd /home/ubuntu/Projects/
git clone https://github.com/ElrondNetwork/sc-chainlink-rs/ && cd sc-chainlink-rs/elrond-adapter && go install && go build -o elrond-adapter
echo -e
echo -e "${GREEN}Install complete for ${CYAN}elrond-adapter${NC}${GREEN}...${NC}"
echo -e
if [ -e $SCRIPTPATH/PEM/owner.pem ]; then cp -f $SCRIPTPATH/PEM/owner.pem $CUSTOM_HOME/Projects/sc-chainlink-rs/elrond-adapter/config/owner.pem; else echo -e "${RED}No PEM provided. Please add one before starting the elrond-adapter...${NC}"; fi
}

function systemd {
#Add systemd node service & syslogd logging

  echo -e
  echo -e "${GREEN}Installing systemd units for the chainlink node & elrond-adapter...${NC}"
  echo -e

  WORKDIR_CHAINLINK=$CUSTOM_HOME/Projects/chainlink
  WORKDIR_ADAPTER=$CUSTOM_HOME/Projects/sc-chainlink-rs/elrond-adapter

  #Create the service file for the chainlink node
  echo "[Unit]
  Description=Chainlink Node
  After=network-online.target
  
  [Service]
  User=$CUSTOM_USER
  WorkingDirectory=$WORKDIR_CHAINLINK
  ExecStart=$WORKDIR_CHAINLINK/chainlink local n -p $WORKDIR_CHAINLINK/.password -a $WORKDIR_CHAINLINK/.api
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > chainlink-node.service
  
  #Create the service file for the elrond-adapter
  echo "[Unit]
  Description=Elrond Adapter
  After=network-online.target
  
  [Service]
  User=$CUSTOM_USER
  WorkingDirectory=$WORKDIR_ADAPTER
  ExecStart=$WORKDIR_ADAPTER/elrond-adapter $ADAPTER_NODE_EXTRA_FLAGS
  StandardOutput=journal
  StandardError=journal
  Restart=always
  RestartSec=3
  LimitNOFILE=4096
  
  [Install]
  WantedBy=multi-user.target" > elrond-adapter.service
  
  #Move files to the appropriate locations
  sudo mv chainlink-node.service /etc/systemd/system/
  sudo mv elrond-adapter.service /etc/systemd/system/
  #Enable services at startup
  sudo systemctl enable chainlink-node.service && sudo systemctl enable elrond-adapter.service
}

function clean {

echo -e
echo -e "${GREEN}Stopping services...${NC}"
echo -e
if [ -e /etc/systemd/system/elrond-adapter.service ]; then sudo systemctl stop elrond-adapter.service; fi
if [ -e /etc/systemd/system/chainlink-node.service ]; then sudo systemctl stop chainlink-node.service; fi
echo -e
echo -e "${GREEN}Erasing service files...${NC}"
echo -e
if [ -e /etc/systemd/system/elrond-adapter.service ]; then sudo rm /etc/systemd/system/elrond-adapter.service; fi
if [ -e /etc/systemd/system/chainlink-node.service ]; then sudo rm /etc/systemd/system/chainlink-node.service; fi

#Reload systemd after deleting node units
sudo systemctl daemon-reload

echo -e "${GREEN}Removing project folders...${NC}"
echo -e      
if [ -d "$CUSTOM_HOME/Projects/chainlink" ]; then sudo rm -rf $CUSTOM_HOME/Projects/chainlink; fi
if [ -d "$CUSTOM_HOME/Projects/sc-chainlink-rs" ]; then sudo rm -rf $CUSTOM_HOME/Projects/sc-chainlink-rs; fi
if [ -d "$CUSTOM_HOME/go" ]; then sudo rm -rf $CUSTOM_HOME/go; fi

#Remove Postgresql and purge its data
echo -e "${GREEN}Purging Postgresql instalation...${NC}"
echo -e      
sudo apt-get --assume-yes --purge remove postgresql*
sudo rm -rf /var/lib/postgresql/ && sudo rm -rf /var/log/postgresql/ && sudo rm -rf /etc/postgresql/
sudo deluser postgres

}